# -*- coding: utf-8 -*-
"""EPISTEMIC.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wn_BGAcbj8NQC1tYF7gO3YKmt8-6lRSK

# Epistemic Benchmark

[epistemic-benchmark](https://github.com/equiano-institute/epistemic-benchmark)
"""

import json
import requests
import networkx as nx
import matplotlib.pyplot as plt

# Load JSON data from the URL
url = "https://gist.githubusercontent.com/jonluca/860f3f445e7d84054822276fd058301a/raw/a42b13917332d1667aba47d411f4cb2f4e22f29c/Bandersnatch"
response = requests.get(url)
data = json.loads(response.text)

# Create a directed graph
G = nx.DiGraph()

# Add nodes for choices
choice_points = data['videos']['80988062']['interactiveVideoMoments']['value']['choicePointNavigatorMetadata']['choicePointsMetadata']['choicePoints']
for choice_id, choice_data in choice_points.items():
    G.add_node(choice_id, type='choice', description=choice_data['description'])

    # Add edges connecting choices to their respective targets
    for target in choice_data['choices']:
        G.add_edge(choice_id, target)

# Define node positions for better visualization
pos = nx.spring_layout(G, seed=100)

# Draw nodes and edges
node_types = nx.get_node_attributes(G, 'type')
nx.draw_networkx_nodes(G, pos, nodelist=[n for n, t in node_types.items() if t == 'choice'], node_color='gray', node_size=80)
nx.draw_networkx_edges(G, pos, edge_color='gray', alpha=0.7)

# Label nodes with descriptions
node_descriptions = nx.get_node_attributes(G, 'description')
nx.draw_networkx_labels(G, pos, labels=node_descriptions, font_size=6)

plt.title("Bandersnatch Interactive Graph")
plt.axis('off')
plt.show()

import json
import requests
import networkx as nx
import matplotlib.pyplot as plt
from PIL import Image, UnidentifiedImageError
from io import BytesIO

# Load JSON data from the URL
url = "https://gist.githubusercontent.com/jonluca/860f3f445e7d84054822276fd058301a/raw/a42b13917332d1667aba47d411f4cb2f4e22f29c/Bandersnatch"
response = requests.get(url)
data = json.loads(response.text)

# Create a directed graph
G = nx.DiGraph()

# Add nodes for choices
choice_points = data['videos']['80988062']['interactiveVideoMoments']['value']['choicePointNavigatorMetadata']['choicePointsMetadata']['choicePoints']
for choice_id, choice_data in choice_points.items():
    description = choice_data['description']

    # Check if 'image' key is present in the choice_data
    if 'image' in choice_data:
        image_url = choice_data['image']['styles']['backgroundImage'][4:-2]
    else:
        image_url = None

    G.add_node(choice_id, description=description, image_url=image_url)

    # Add edges connecting choices to their respective targets
    for target in choice_data['choices']:
        G.add_edge(choice_id, target)

# Define node positions for better visualization
pos = nx.spring_layout(G, seed=40)

# Draw nodes and edges
node_descriptions = nx.get_node_attributes(G, 'description')
nx.draw_networkx_nodes(G, pos, nodelist=[node_id for node_id in G.nodes()], node_color='brown', node_size=80)

# Adding images to the nodes
for node_id, data in G.nodes(data=True):
    if data.get('image_url') is not None:
        image_url = data['image_url']
        response = requests.get(image_url)
        try:
            img = Image.open(BytesIO(response.content))
            img.thumbnail((50, 50))  # Resize the image to fit the node
            plt.figimage(img, pos[node_id][0] - 0.03, pos[node_id][1] - 0.03)  # Adjust position of the image
        except UnidentifiedImageError:
            pass  # Handle the UnidentifiedImageError by doing nothing (using a placeholder)

nx.draw_networkx_labels(G, pos, labels=node_descriptions, font_size=6)

plt.title("Bandersnatch Interactive Graph")
plt.axis('off')
plt.show()

import json
import requests
import networkx as nx
import matplotlib.pyplot as plt
from PIL import Image, UnidentifiedImageError
from io import BytesIO

# Load JSON data from the URL
url = "https://gist.githubusercontent.com/jonluca/860f3f445e7d84054822276fd058301a/raw/a42b13917332d1667aba47d411f4cb2f4e22f29c/Bandersnatch"
response = requests.get(url)
data = json.loads(response.text)

# Create a directed graph
G = nx.DiGraph()

# Add nodes for choices
choice_points = data['videos']['80988062']['interactiveVideoMoments']['value']['choicePointNavigatorMetadata']['choicePointsMetadata']['choicePoints']
for choice_id, choice_data in choice_points.items():
    description = choice_data['description']

    # Check if 'image' key is present in the choice_data
    if 'image' in choice_data:
        image_url = choice_data['image']['styles']['backgroundImage'][4:-2]
    else:
        image_url = None

    G.add_node(choice_id, description=description, image_url=image_url)

    # Add edges connecting choices to their respective targets
    for target in choice_data['choices']:
        G.add_edge(choice_id, target)

# Define node positions for better visualization
pos = nx.spring_layout(G, seed=40)

# Draw nodes and edges
nx.draw_networkx_nodes(G, pos, nodelist=[node_id for node_id in G.nodes()], node_color='brown', node_size=80)
nx.draw_networkx_edges(G, pos, edgelist=G.edges(), edge_color='gray')

# Adding images to the nodes
for node_id, data in G.nodes(data=True):
    if data.get('image_url') is not None:
        image_url = data['image_url']
        response = requests.get(image_url)
        try:
            img = Image.open(BytesIO(response.content))
            img.thumbnail((50, 50))  # Resize the image to fit the node
            plt.figimage(img, pos[node_id][0] - 0.03, pos[node_id][1] - 0.03)  # Adjust position of the image
        except UnidentifiedImageError:
            pass  # Handle the UnidentifiedImageError by doing nothing (using a placeholder)

# Draw node labels
node_descriptions = nx.get_node_attributes(G, 'description')
nx.draw_networkx_labels(G, pos, labels=node_descriptions, font_size=6)

plt.title("Bandersnatch Interactive Graph")
plt.axis('off')
plt.show()

import requests
import matplotlib.pyplot as plt
import imageio
from io import BytesIO

# Load JSON data from the URL
url = "https://gist.githubusercontent.com/jonluca/860f3f445e7d84054822276fd058301a/raw/a42b13917332d1667aba47d411f4cb2f4e22f29c/Bandersnatch"
response = requests.get(url)
data = response.json()

# Get the choice points
choice_points = data['videos']['80988062']['interactiveVideoMoments']['value']['choicePointNavigatorMetadata']['choicePointsMetadata']['choicePoints']

# Filter the choice points to get the first 10 with images
choice_points_with_images = [choice_data for choice_data in choice_points.values() if 'image' in choice_data][:10]

# Display the gallery of images
plt.figure(figsize=(12, 8))
for idx, choice_data in enumerate(choice_points_with_images, start=1):
    image_url = choice_data['image']['styles']['backgroundImage'][4:-1]
    try:
        response = requests.get(image_url)
        img = imageio.imread(BytesIO(response.content))
        plt.subplot(2, 5, idx)
        plt.imshow(img)
        plt.title(choice_data['description'])
        plt.axis('off')
    except Exception as e:
        print(f"Error loading image: {e} {image_url}")

plt.tight_layout()
plt.show()

"""A Collection of 40 Images

"""

import requests
import matplotlib.pyplot as plt
import imageio
from io import BytesIO

# Load JSON data from the URL
url = "https://gist.githubusercontent.com/jonluca/860f3f445e7d84054822276fd058301a/raw/a42b13917332d1667aba47d411f4cb2f4e22f29c/Bandersnatch"
response = requests.get(url)
data = response.json()

# Get the choice points
choice_points = data['videos']['80988062']['interactiveVideoMoments']['value']['choicePointNavigatorMetadata']['choicePointsMetadata']['choicePoints']

# Filter the choice points to get those with images
choice_points_with_images = [choice_data for choice_data in choice_points.values() if 'image' in choice_data]

# Display the gallery of images, choice options, and descriptions
num_images = min(len(choice_points_with_images), 40)  # Display up to 40 images
num_rows = (num_images + 4) // 5  # Calculate the number of rows needed for layout

plt.figure(figsize=(30, 20))
for idx, choice_data in enumerate(choice_points_with_images[:num_images], start=1):
    image_url = choice_data['image']['styles']['backgroundImage'][4:-1]
    try:
        response = requests.get(image_url)
        img = imageio.imread(BytesIO(response.content))
        plt.subplot(num_rows, 5, idx)
        plt.imshow(img)
        plt.title(f"Choice {idx}:\n{choice_data['description']}\nOptions: {', '.join(choice_data['choices'])}", fontsize=8)
        plt.axis('off')
    except Exception as e:
        print(f"Error loading image: {e} {image_url}")

plt.tight_layout(w_pad=2, h_pad=2)  # Increase the inter-spacing
plt.show()



"""How the scenes connect

"""



import requests
import plotly.graph_objs as go
from IPython.display import display, HTML

# Load JSON data from the URL
url = "https://gist.githubusercontent.com/jonluca/860f3f445e7d84054822276fd058301a/raw/a42b13917332d1667aba47d411f4cb2f4e22f29c/Bandersnatch"
response = requests.get(url)
data = response.json()

# Get the choice points
choice_points = data['videos']['80988062']['interactiveVideoMoments']['value']['choicePointNavigatorMetadata']['choicePointsMetadata']['choicePoints']

# Create nodes and edges for the plot
nodes = []
edges = []

for choice_id, choice_data in choice_points.items():
    nodes.append(choice_id)
    parent = choice_data['startTimeMs']
    choices = choice_data['choices']
    for c in choices:
        edges.append((parent, c))

# Create a Plotly figure
fig = go.Figure()

# Add nodes
for idx, node in enumerate(nodes):
    fig.add_trace(go.Scatter(x=[node], y=[0], mode='markers+text', marker=dict(size=10), text=[node], textposition="top center"))
    if idx % 2 == 0:
        fig.add_trace(go.Scatter(x=[node, node], y=[-0.1, 0.1], mode='lines', line=dict(width=2), showlegend=False))

# Add edges
for start, end in edges:
    fig.add_trace(go.Scatter(x=[start, end], y=[0, 0], mode='lines', line=dict(width=2), showlegend=False))

# Customize the layout
fig.update_layout(
    title="Interactive Video Choice Relationships",
    xaxis=dict(
        showticklabels=False,
        showgrid=False,
        zeroline=False
    ),
    yaxis=dict(
        showticklabels=False,
        showgrid=False,
        zeroline=False
    )
)

# Display the interactive plot
display(HTML(fig.to_html()))

